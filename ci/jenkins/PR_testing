void setBuildStatus(String message, String context, String state) {
  // add a Github access token as a global 'secret text' credential on Jenkins with the id 'github-commit-status-token'
    withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'TOKEN')]) {
        sh """
        set -x
            curl \"https://api.github.com/repos/c2sm/spack-c2sm/statuses/$GIT_COMMIT?access_token=$TOKEN\" \
                -H \"Content-Type: application/json\" \
                -X POST \
                -d \"{\\\"description\\\": \\\"$message\\\", \\\"state\\\": \\\"$state\\\", \\\"context\\\": \\\"$context\\\", \\\"target_url\\\": \\\"$BUILD_URL\\\"}\"
        """
    }
}
pipeline {
    agent none
    stages {
        stage('Run Tests') {
            parallel {
                stage('test on tsa') {
                    agent { label 'tsa' } 
                    steps {
                        setBuildStatus("Compiling", "compile", "pending");
                        sh """
                        module load python/3.7.4
                        python ./ci/scripts/test_spack.py --tsa """ + env.ghprbCommentBody
                    }
                    post {
                        always {
                            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                                sh"""
                                module load python/3.7.4
                                python ./ci/scripts/send_summary_as_comment_to_PR.py
                                """
                            }
                            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                            echo 'Cleaning up workspace'
                            deleteDir() 
                            setBuildStatus("Completed", "compile", "done");
                        }
                    }
                }
                stage('test on daint') {
                    agent { label 'daint' } 
                    steps {
                        sh """
                        module load cray-python
                        python ./ci/scripts/test_spack.py --daint """ + env.ghprbCommentBody
                    }
                    post {
                        always {
                            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                                sh"""
                                module load cray-python
                                python ./ci/scripts/send_summary_as_comment_to_PR.py
                                """
                            }
                            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                            echo 'Cleaning up workspace'
                            deleteDir() 
                        }
                    }
                }
            }
        }
    }
}
